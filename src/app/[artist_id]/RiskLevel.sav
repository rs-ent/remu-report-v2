'use client';

import React, { useEffect, useState } from 'react';
import { useReport, useKPI } from '../../context/GlobalData';
import {
    RadialBarChart,
    RadialBar,
    PolarAngleAxis,
    ResponsiveContainer,
} from 'recharts';
import { calculateRiskLevelPercentage } from '../processors/riskLevel';
import { FaCheckCircle, FaExclamationTriangle, FaTimesCircle } from 'react-icons/fa';

const RiskLevel = () => {
    const report = useReport();
    const kpiData = useKPI();

    const goal_fund = report.goal_fund || 0;
    const expectedAnnualRevenue = kpiData.expectedAnnualRevenue || 0;

    // 위험 수준 퍼센트 계산
    const { percentage } = calculateRiskLevelPercentage(
        goal_fund,
        expectedAnnualRevenue
    );

    // 차트 데이터
    const data = [
        {
            name: 'Risk Level',
            value: percentage,
            fill: '#6366F1', // 모던한 보라색 계열 색상 사용
        },
    ];

    // 바늘 상태 관리
    const [needleAngle, setNeedleAngle] = useState(-90); // 초기 각도 (0%)

    useEffect(() => {
        const targetAngle = (percentage / 100) * 180 - 90; // 목표 각도
        const animationDuration = 2000; // 애니메이션 지속 시간 (밀리초)
        const startTime = performance.now();

        const animate = (currentTime) => {
            const elapsedTime = currentTime - startTime;
            const progress = Math.min(elapsedTime / animationDuration, 1); // 진행률 (0 ~ 1)
            const currentAngle = -90 + progress * (targetAngle + 90); // 보간
            setNeedleAngle(currentAngle);

            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };

        requestAnimationFrame(animate);
    }, [percentage]);

    // 5단계 위험 수준 정의
    const riskLevels = [
        {
            min: 0,
            max: 20,
            borderColor: 'border-blue-500',
            textColor: 'text-blue-600',
            icon: <FaCheckCircle className="text-4xl text-blue-600" />,
            riskText: '초저위험',
            description: '수익이 보장됩니다.',
        },
        {
            min: 20,
            max: 40,
            borderColor: 'border-green-500',
            textColor: 'text-green-600',
            icon: <FaCheckCircle className="text-4xl text-green-600" />,
            riskText: '저위험',
            description: '수익이 어느 정도 보장됩니다.',
        },
        {
            min: 40,
            max: 60,
            borderColor: 'border-yellow-500',
            textColor: 'text-yellow-600',
            icon: <FaExclamationTriangle className="text-4xl text-yellow-600" />,
            riskText: '중위험',
            description: '리스크 수용 자세가 필요합니다.',
        },
        {
            min: 60,
            max: 80,
            borderColor: 'border-orange-500',
            textColor: 'text-orange-600',
            icon: <FaExclamationTriangle className="text-4xl text-orange-600" />,
            riskText: '고위험',
            description: '주의가 필요합니다.',
        },
        {
            min: 80,
            max: 101,
            borderColor: 'border-red-500',
            textColor: 'text-red-600',
            icon: <FaTimesCircle className="text-4xl text-red-600" />,
            riskText: '초고위험',
            description: '신중한 투자 결정이 필요합니다.',
        },
    ];

    // 현재 위험 수준 찾기
    const currentRiskLevel =
        riskLevels.find(
            (level) => percentage >= level.min && percentage < level.max
        ) || riskLevels[riskLevels.length - 1];

    // 커스텀 바늘 렌더링
    const renderNeedle = () => {
        const cx = 50; // 중심 X (%)
        const cy = 50; // 중심 Y (%)
        const radius = 40; // 반지름 (%)

        return (
            <g>
                {/* 바늘 */}
                <g
                    style={{
                        transform: `rotate(${needleAngle}deg)`,
                        transformOrigin: '50% 50%',
                    }}
                >
                    <line
                        x1={`${cx}%`}
                        y1={`${cy}%`}
                        x2={`${cx}%`}
                        y2={`${cy - radius}%`}
                        stroke="#374151" // 중립적인 어두운 색상 사용
                        strokeWidth="2"
                    />
                    <circle cx={`${cx}%`} cy={`${cy}%`} r="2%" fill="#374151" />
                </g>
            </g>
        );
    };

    return (
        <div className="mx-auto overflow-hidden">
            <div className="p-8">
                {/* 타이틀 */}
                <div className="uppercase tracking-wide text-sm text-indigo-500 font-semibold text-center mb-6">
                    위험 수준 평가
                </div>
                {/* 퍼센트 표시 */}
                <div className="text-center mb-4">
                    <span className="text-5xl font-extrabold text-gray-900">
                        {`${percentage.toFixed(1)}%`}
                    </span>
                </div>
                {/* 차트 */}
               <div style={{ width: '100%', height: '270px', overflow: 'hidden'}}>
                    <div>
                        <ResponsiveContainer width="100%" aspect={1}>
                            <RadialBarChart
                                cx="50%"
                                cy="50%"
                                innerRadius="80%"
                                outerRadius="100%"
                                startAngle={180}
                                endAngle={0}
                                data={data}
                            >
                                <RadialBar
                                    background={{ fill: '#F3F4F6' }} // 연한 회색 배경
                                    dataKey="value"
                                    cornerRadius={3}
                                    clockWise
                                />
                                <PolarAngleAxis
                                    type="number"
                                    domain={[0, 100]}
                                    tick={false}
                                    axisLine={false}
                                />
                                {renderNeedle()}
                            </RadialBarChart>
                        </ResponsiveContainer>
                    </div>
                </div>
                {/* 위험 수준 표시 */}
                <div
                    className={`flex flex-col items-center mt-8 p-6 rounded-lg border ${currentRiskLevel.borderColor} ${currentRiskLevel.textColor}`}
                >
                    {/* 아이콘 */}
                    <div className="mb-2">{currentRiskLevel.icon}</div>
                    {/* 위험 수준 텍스트 */}
                    <h2 className="text-xl font-bold tracking-wide">
                        {currentRiskLevel.riskText}
                    </h2>
                    {/* 설명 텍스트 */}
                    <p className="text-sm mt-2 text-center">
                        {currentRiskLevel.description}
                    </p>
                </div>
                {/* 추가된 버튼 */}
                <div className="flex justify-end mt-4 space-x-2">
                    <button className="text-xs text-gray-500 underline">산정 기준</button>
                    <button className="text-xs text-gray-500 underline">투자 위험 안내</button>
                </div>
            </div>
        </div>
    );
};

export default RiskLevel;